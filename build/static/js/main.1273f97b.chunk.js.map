{"version":3,"sources":["app.module.css","Components/Editor/editor.module.css","Components/Result/Result.module.css","store/Actions/codeActionTypes.js","Components/Editor/Editor.js","store/Actions/codeActions.js","Components/Result/Result.js","App.js","serviceWorker.js","store/Reducers/codeReducer.js","store/reducerConfig.js","index.js"],"names":["module","exports","INPUT_CHANGE","OUTPUT_CHANGE","SUBMITTING","require","Editor","state","lang","mode","value","file","imageURL","submitHandler","props","submitting","x","code","input","axios","post","then","response","outputChange","data","output","catch","error","modeToggleHandler","setState","handleImageUpload","formData","FormData","append","res","err","console","log","handleImageToText","text","DownloadFile","element","document","createElement","Blob","type","href","URL","createObjectURL","download","body","appendChild","click","className","classes","run","heading","submit","onClick","toogle","this","active","normal","imageDiv","inputDiv","accept","onChange","e","target","files","style","marginTop","imageUploadDiv","src","imagePreview","onBeforeChange","editor","options","theme","lineNumbers","indentUnit","indentWithTabs","autoCursor","Component","connect","dispatch","Result","useDispatch","useSelector","show","item","label","fontSize","margin","color","event","inputChange","placeholder","spellCheck","resize","App","root","result","Boolean","window","location","hostname","match","initState","reducer","actions","combineReducers","store","configureStore","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.1273f97b.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"app_root__15E-r\",\"editor\":\"app_editor__3J4Vn\",\"result\":\"app_result__LxRy7\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"imageDiv\":\"editor_imageDiv__fieMZ\",\"inputDiv\":\"editor_inputDiv__16Dfi\",\"input\":\"editor_input__3Zmo_\",\"imageUploadDiv\":\"editor_imageUploadDiv__1vzsk\",\"imagePreview\":\"editor_imagePreview__3BIwW\",\"code\":\"editor_code__3gwL7\",\"run\":\"editor_run__29z7e\",\"submit\":\"editor_submit__3bnfk\",\"toogle\":\"editor_toogle__bVyCH\",\"active\":\"editor_active__3TyLe\",\"normal\":\"editor_normal__pEoXK\",\"heading\":\"editor_heading__2M6tR\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Result_item__2kNc8\",\"label\":\"Result_label__3pNWB\",\"input\":\"Result_input__x3rvq\",\"show\":\"Result_show__1jExy\"};","export const INPUT_CHANGE = \"INPUT_CHANGE\";\nexport const OUTPUT_CHANGE = \"OUTPUT_CHANGE\";\nexport const SUBMITTING = \"SUBMITTING\";\n","import { Controlled as CodeMirror } from \"react-codemirror2\";\nimport React, { Component } from \"react\";\nimport { outputChange, submitting } from \"../../store/Actions/codeActions\";\nimport { connect } from \"react-redux\";\nimport axios from \"axios\";\nimport classes from \"./editor.module.css\";\nimport \"codemirror/lib/codemirror.css\";\nimport \"codemirror/theme/material.css\";\nimport \"codemirror/theme/dracula.css\";\nrequire(\"codemirror/mode/clike/clike\");\nrequire(\"codemirror/mode/python/python\");\n\nclass Editor extends Component {\n  state = {\n    lang: \"cpp17\",\n    mode: \"clike\",\n    value: `#include <iostream>\nusing namespace std;\n\nint main() {\n    int x=10;\n    cin>>x;\n    cout<<x;\n}\n        `,\n    file: \"\",\n    imageURL: \"\",\n  };\n  submitHandler = () => {\n    this.props.submitting();\n    const x = {\n      code: this.state.value,\n      input: this.props.input,\n      lang: this.state.lang,\n    };\n    axios\n      .post(\"/api/codeCompile\", x)\n      .then((response) => {\n        // console.log(response.data.output);\n        this.props.outputChange(response.data.output.output);\n      })\n      .catch((error) => {\n        // console.log(error);\n      });\n  };\n  modeToggleHandler = (mode) => {\n    if (mode === \"cpp17\") {\n      this.setState({ mode: \"clike\", lang: \"cpp17\" });\n    } else if (mode === \"java\") {\n      this.setState({ mode: \"clike\", lang: \"java\" });\n    } else if (mode === \"python\") {\n      this.setState({ mode: \"python\", lang: \"python3\" });\n    }\n  };\n  handleImageUpload = () => {\n    const formData = new FormData();\n    formData.append(\"image\", this.state.file);\n    axios\n      .post(\"/api/imageUpload\", formData)\n      .then((res) => {\n        // console.log(res);\n        this.setState({ imageURL: res.data.imageURL });\n      })\n      .catch((err) => console.log(err));\n  };\n  handleImageToText = () => {\n    axios\n      .post(\"/api/imageToText\", {\n        imageURL: this.state.imageURL,\n      })\n      .then((res) => {\n        // console.log(res);\n        this.setState({ value: res.data.text });\n      })\n      .catch((err) => {\n        // console.log(err);\n      });\n  };\n  DownloadFile = () => {\n    const element = document.createElement(\"a\");\n    const file = new Blob([this.state.value], {\n      type: \"text/plain\",\n    });\n    element.href = URL.createObjectURL(file);\n    element.download = \"myFile.cpp\";\n    document.body.appendChild(element); // Required for this to work in FireFox\n    element.click();\n  };\n  render() {\n    return (\n      <>\n        <div className={classes.run}>\n          <div className={classes.heading}>Source Code</div>\n          <div>\n            <button\n              className={classes.submit}\n              onClick={() => this.submitHandler()}\n            >\n              Run\n            </button>\n            <button\n              className={classes.submit}\n              onClick={() => this.DownloadFile()}\n            >\n             Save\n            </button>\n          </div>\n          <div className={classes.toogle}>\n            <div\n              className={\n                this.state.lang === \"cpp17\" ? classes.active : classes.normal\n              }\n              onClick={() => this.modeToggleHandler(\"cpp17\")}\n            >\n              C++\n            </div>\n            {/* <div\n                            className={this.state.lang === \"java\" ? classes.active : classes.normal}\n                            onClick={() => this.modeToggleHandler(\"java\")}\n                        >\n                            Java\n                        </div>\n                        <div\n                            className={\n                                this.state.lang === \"python3\" ? classes.active : classes.normal\n                            }\n                            onClick={() => this.modeToggleHandler(\"python\")}\n                        >\n                            Python\n                        </div> */}\n          </div>\n        </div>\n        {/* <div className={classes.down}>GO DOWN!!!</div> */}\n        <div className={classes.imageDiv}>\n          <div className={classes.inputDiv}>\n            <input\n              className={classes.input}\n              type=\"file\"\n              accept=\"image/x-png,image/jpg,image/jpeg\"\n              onChange={(e) => {\n                this.setState({ file: e.target.files[0] });\n              }}\n            />\n            <button\n              className={classes.submit}\n              onClick={() => this.handleImageUpload()}\n              style={{ marginTop: \"10px\" }}\n            >\n              Upload\n            </button>\n          </div>\n\n          <div className={classes.imageUploadDiv}>\n            {this.state.imageURL !== \"\" ? (\n              <img src={this.state.imageURL} className={classes.imagePreview} />\n            ) : (\n              \"\"\n            )}\n            {this.state.imageURL !== \"\" ? (\n              <button\n                className={classes.submit}\n                onClick={() => this.handleImageToText()}\n                style={{ marginTop: \"10px\" }}\n              >\n                Convert\n              </button>\n            ) : (\n              \"\"\n            )}\n          </div>\n        </div>\n        <CodeMirror\n          className={classes.code}\n          value={this.state.value}\n          onBeforeChange={(editor, data, value) => {\n            this.setState({ value: value });\n          }}\n          options={{\n            mode: this.state.mode,\n            theme: \"dracula\",\n            lineNumbers: true,\n            indentUnit: 4,\n            indentWithTabs: true,\n          }}\n          autoCursor={true}\n          onChange={(editor, data, value) => {}}\n        />\n      </>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    input: state.code.input,\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    outputChange: (output) => dispatch(outputChange(output)),\n    submitting: () => dispatch(submitting()),\n  };\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(Editor);\n","import { INPUT_CHANGE, OUTPUT_CHANGE, SUBMITTING } from \"./codeActionTypes\";\nexport const inputChange = (input) => {\n    return {\n        type: INPUT_CHANGE,\n        input: input,\n    };\n};\nexport const outputChange = (output) => {\n    return {\n        type: OUTPUT_CHANGE,\n        output: output,\n    };\n};\n\nexport const submitting = () => {\n    return {\n        type: SUBMITTING,\n    };\n};\n","import React from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { inputChange } from \"../../store/Actions/codeActions\";\nimport classes from \"./Result.module.css\";\nconst Result = () => {\n    const dispatch = useDispatch();\n    const { input, output } = useSelector((state) => state.code);\n    const handleChange = (event) => {\n        dispatch(inputChange(event.target.value));\n    };\n    return (\n        <>\n            <div className={classes.show}></div>\n            <div className={classes.item}>\n                <div className={classes.label}>\n                    INPUT\n                    <p style={{ fontSize: \"1rem\", margin: 0, color: \"#888fb5\" }}>\n                        Go ahead test your code here!\n                    </p>\n                </div>\n                <textarea\n                    className={classes.input}\n                    onChange={handleChange}\n                    value={input}\n                    placeholder=\"Input....\"\n                    spellCheck=\"false\"\n                ></textarea>\n            </div>\n            <div className={classes.item}>\n                <div className={classes.label}>\n                    OUTPUT\n                    <p style={{ fontSize: \"1rem\", margin: 0, color: \"#888fb5\" }}>\n                        Output of your code\n                    </p>\n                </div>\n                <textarea\n                    style={{ resize: \"both\" }}\n                    className={classes.input}\n                    value={output}\n                    placeholder=\"Output Will Be Here\"\n                    spellCheck=\"false\"\n                ></textarea>\n            </div>\n        </>\n    );\n};\nexport default Result;\n","import React, { Component } from \"react\";\nimport classes from \"./app.module.css\";\nimport Editor from \"./Components/Editor/Editor\";\nimport Result from \"./Components/Result/Result\";\nclass App extends Component {\n    render() {\n        return (\n            <div className={classes.root}>\n                <div className={classes.editor}>\n                    <Editor />\n                </div>\n                <div className={classes.result}>\n                    <Result />\n                </div>\n            </div>\n        );\n    }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { INPUT_CHANGE, OUTPUT_CHANGE, SUBMITTING } from \"../Actions/codeActionTypes\";\nconst initState = {\n    input: null,\n    output: null,\n};\n\nconst reducer = (state = initState, actions) => {\n    switch (actions.type) {\n        case INPUT_CHANGE:\n            return {\n                ...state,\n                input: actions.input,\n            };\n        case OUTPUT_CHANGE:\n            return {\n                ...state,\n                output: actions.output,\n            };\n        case SUBMITTING:\n            return {\n                ...state,\n                output: \"Compiling....\",\n            };\n        default:\n            return state;\n    }\n};\n\nexport default reducer;\n","import { configureStore } from \"@reduxjs/toolkit\";\nimport { combineReducers } from \"redux\";\nimport code from \"./Reducers/codeReducer\";\nconst reducer = combineReducers({\n    code,\n});\nconst store = configureStore({\n    reducer,\n});\nexport default store;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport store from \"./store/reducerConfig\";\nimport { Provider } from \"react-redux\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <App />\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}